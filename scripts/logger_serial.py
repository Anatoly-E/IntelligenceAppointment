import os
import re
import time
import sqlite3
import serial
from datetime import datetime
import serial.tools.list_ports
from crypto_utils import load_or_create_key, encrypt_value

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
DB_PATH = os.path.join("data", "data.db")
BAUD_RATE = 115200
LOG_INTERVAL = 0.1 # –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–µ–Ω–∏—è Serial (—Å–µ–∫)

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ----------
def init_db():
    os.makedirs("logs", exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            temperature REAL,
            humidity REAL,
            distance REAL,
            state TEXT
        )
    """)
    conn.commit()
    conn.close()

# ---------- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ COM-–ø–æ—Ä—Ç–∞ ----------
def detect_arduino_port():
    ports = serial.tools.list_ports.comports()
    for port in ports:
        if "Arduino" in port.description or "USB-SERIAL" in port.description:
            return port.device
    return ports[0].device if ports else None

# ---------- –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ ----------
def parse_data(line: str):
    """
    –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫:
    Temperature: 23.4 ¬∞C
    Humidity: 40 %
    Distance: 120 sm
    System state: Alarm!!!
    """
    temp = re.search(r"Temperature:\s*([\d.]+)", line)
    hum = re.search(r"Humidity:\s*([\d.]+)", line)
    dist = re.search(r"Distance:\s*([\d.]+)", line)
    state = re.search(r"System state:\s*([\w! ]+)", line)

    return {
        "temperature": float(temp.group(1)) if temp else None,
        "humidity": float(hum.group(1)) if hum else None,
        "distance": float(dist.group(1)) if dist else None,
        "state": state.group(1) if state else None,
    }

# ---------- –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É ----------
def insert_data(data):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        INSERT INTO logs (timestamp, temperature, humidity, distance, state)
        VALUES (?, ?, ?, ?, ?)
    """, (
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        data["temperature"],
        data["humidity"],
        data["distance"],
        data["state"]
    ))
    conn.commit()
    conn.close()

# ---------- –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä ----------
def log_serial_data(port):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º) –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    fernet = load_or_create_key()

    try:
        with serial.Serial(port, BAUD_RATE, timeout=1) as ser:
            print(f"[LOGGER] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port}. –ó–∞–ø–∏—Å—å –≤ {DB_PATH}")
            buffer = ""

            while True:
                line = ser.readline().decode(errors="ignore").strip()
                if line:
                    print(line)
                    buffer += line + " "

                    # –ö–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–∏ –±–ª–æ–∫ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)
                    if "System state" in line:
                        data = parse_data(buffer)

                        # --- üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é ---
                        encrypted_data = {}
                        for key, value in data.items():
                            if value is not None:
                                encrypted_data[key] = encrypt_value(fernet, str(value))
                            else:
                                encrypted_data[key] = None

                        # –¢–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ
                        insert_data(encrypted_data)

                        buffer = ""  # –æ—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏

                time.sleep(LOG_INTERVAL)

    except serial.SerialException as e:
        print(f"[LOGGER] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


# ---------- main ----------
def main():
    print("[LOGGER] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    print("[LOGGER] –ü–æ–∏—Å–∫ Arduino...")

    port = detect_arduino_port()
    if not port:
        print("[LOGGER] Arduino –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    print(f"[LOGGER] –ù–∞–π–¥–µ–Ω –ø–æ—Ä—Ç: {port}")
    log_serial_data(port)


if __name__ == "__main__":
    main()